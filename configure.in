
AC_INIT([ncdc], [1.9g], [projects@yorhel.nl])
AC_CONFIG_SRCDIR([src/ncdc.h])
AC_CONFIG_HEADER([config.h])
AM_INIT_AUTOMAKE([foreign])
PKG_PROG_PKG_CONFIG([0.18])


# Check for programs.
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_RANLIB

AC_SYS_LARGEFILE


# Use silent building
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])

# Ask whether we want to compile ncdc-db-upgrade
AC_ARG_ENABLE([db-upgrade],
  AS_HELP_STRING([--enable-db-upgrade], [Compile and install the ncdc-db-upgrade utility]))
AM_CONDITIONAL([ENABLE_DB_UPGRADE], [test "x$enable_db_upgrade" = "xyes"])

# Check for pod2man (TODO: make this optional for tarball releases?)
AC_CHECK_PROG([have_pod2man],[pod2man],[yes],[no])
AM_CONDITIONAL([USE_POD2MAN], [test "x$have_pod2man" = "xyes"])

# Check for makeheaders. Not having makeheaders is fatal if no header files are
# present in this distribution. (Only main.h is checked, though)
AC_CHECK_PROG([have_mh],[makeheaders],[yes],[no])
if test \( "x$have_mh" = "xno" \) -a \( ! -f "$srcdir/src/main.h" \) ; then
  AC_MSG_ERROR([Could not find the makeheaders program.])
fi
AM_CONDITIONAL([USE_MH], [test "x$have_mh" = "xyes"])


# Check for header files.
AC_CHECK_HEADERS(
  [wchar.h locale.h signal.h fcntl.h bzlib.h sys/types.h sys/stat.h],[],
  AC_MSG_ERROR([Required header file not found]))

have_nch=no
AC_CHECK_HEADERS([ncursesw/ncurses.h ncurses.h],[have_nch=yes])
if test "x$have_nch" = "xno"; then
  AC_MSG_ERROR([Could not find a header files for ncurses.])
fi


# Require a large off_t
AC_CHECK_SIZEOF([off_t])
if test "$ac_cv_sizeof_off_t" -lt 8; then
  AC_MSG_ERROR([No large file support available in this system.])
fi


# Check for library functions.
AC_CHECK_FUNCS(
  [setlocale sigaction fcntl ftruncate],[],
  AC_MSG_ERROR([Required function missing]))

# Check for posix_fadvise()
AC_CHECK_FUNCS([posix_fadvise])


# Check for sendfile() support (not required)
# The following checks are based on ProFTPD's configure.in, except ncdc only
# supports the Linux and BSD variant at the moment, as those are the only two I
# have tested so far.

AC_CACHE_CHECK([which sendfile() implementation to use], pr_cv_sendfile_func,
  pr_cv_sendfile_func="none"

  # Linux
  if test "$pr_cv_sendfile_func" = "none"; then
    AC_LINK_IFELSE([AC_LANG_PROGRAM(
      [[ #include <sys/types.h>
         #include <sys/sendfile.h>
         #include <unistd.h> ]],
      [[ int i=0;
         off_t o=0;
         size_t c=0;
         (void)sendfile(i,i,&o,c); ]])],
      [pr_cv_sendfile_func="Linux"])
  fi

  # BSD
  if test "$pr_cv_sendfile_func" = "none"; then
    AC_LINK_IFELSE([AC_LANG_PROGRAM(
      [[ #include <sys/types.h>
         #include <sys/socket.h>
         #include <sys/uio.h> ]],
      [[ int i=0;
         off_t o=0;
         size_t n=0;
         struct sf_hdtr h={};
         (void)sendfile(i,i,o,n,&h,&o,i); ]])],
      [pr_cv_sendfile_func="BSD"])
  fi
)

# set defines
if test "$pr_cv_sendfile_func" != none; then
  AC_DEFINE(HAVE_SENDFILE, 1, [Define if sendfile support.])
fi

case "$pr_cv_sendfile_func" in
  "Linux")
    AC_DEFINE(HAVE_LINUX_SENDFILE, 1, [Define if using Linux sendfile support.]);;
  "BSD")
    AC_DEFINE(HAVE_BSD_SENDFILE,   1, [Define if using BSD sendfile support.]);;
esac


# Check for ncursesw
AC_CHECK_LIB([ncursesw],
             [get_wch],
             [AC_SUBST([NCURSES_LIBS],[-lncursesw])],
             [AC_MSG_ERROR(ncursesw library is required)])

# Check for libbz2
AC_CHECK_LIB([bz2],
             [BZ2_bzReadOpen],
             [AC_SUBST([BZ2_LIBS],[-lbz2])],
             [AC_MSG_ERROR(bzip2 library is required)])

# Check for gdbm
if test "x$enable_db_upgrade" = "xyes"; then
  have_gdbm=no
  AC_CHECK_LIB([gdbm],
               [gdbm_open],
               [AC_CHECK_HEADERS([gdbm.h], [have_gdbm=yes])])
  if test "x$have_gdbm" != "xyes"; then
    AC_MSG_ERROR([--enable-db-upgrade set, but GDBM is not available])
  fi
  AC_SUBST([GDBM_LIBS],[-lgdbm])
fi


# Check for SQLite3
PKG_CHECK_EXISTS([sqlite3],[
    PKG_CHECK_MODULES([SQLITE],[sqlite3])
  ],[
    AC_CHECK_HEADERS([sqlite3.h],[],
                     [AC_MSG_ERROR([sqlite3 header file not found])])
    AC_CHECK_LIB([sqlite3],
                 [sqlite3_open],
                 [AC_SUBST([SQLITE_LIBS],[-lsqlite3])],
                 [AC_MSG_ERROR([sqlite3 library is required])])
  ]
)

# Check for modules
PKG_CHECK_MODULES([GLIB],   [glib-2.0 >= 2.24])
PKG_CHECK_MODULES([GIO],    [gthread-2.0 gio-unix-2.0])
PKG_CHECK_MODULES([LIBXML], [libxml-2.0])
PKG_CHECK_MODULES([GNUTLS], [gnutls]) # TODO: figure out minimum required version


# Check whether we should use the version string from AC_INIT(), or use
# git-describe to create one. This trick is copied from the pacman source.

AC_ARG_ENABLE(git-version,
  AS_HELP_STRING([--enable-git-version], [enable use of git version in version string if available]),
  [wantgitver=$enableval], [wantgitver=yes])

usegitver=no
if test "x$wantgitver" = "xyes" ; then
  AC_CHECK_PROGS([GIT], [git])
  AC_CHECK_FILE([.git/], hasgitdir=yes)
  test $GIT -a "x$hasgitdir" = "xyes" && usegitver=yes
fi
AM_CONDITIONAL(USE_GIT_VERSION, test "x$usegitver" = "xyes")





AC_OUTPUT([GNUmakefile doc/GNUmakefile src/GNUmakefile util/GNUmakefile])


# Notify user about missing makeheaders
if test "x$have_mh" = "xno"; then
  echo ""
  echo "WARNING: Could not find the makeheaders program."
  echo " If you wish to make non-trivial changes to the source code, you"
  echo " may want to install makeheaders and re-run this configure script."
  echo ""
fi


# Information about TLS or GDBM support
echo ""
if test "x$enable_db_upgrade" = "xyes"; then
  echo "db-upgrade  : enabled."
else
  echo "db-upgrade  : disabled."
  echo "  The ncdc-db-upgrade utility will not be built."
fi
echo ""

